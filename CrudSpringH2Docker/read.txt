//B 1. Basic CRUD Docker Spring 3.0 project 2. H2 DB support 3. With Swagger support
Perquisites: Java, Maven, Docker
https://chameerar.medium.com/dockerized-spring-boot-rest-application-57b4de4a2be9

[Local Test]
mvn package -DskipTests  
java -jar DockerBaseSpring-1.0-SNAPSHOT.jar
localhost:8080/hello/message

// Web server does not start, application exits with code 0
//@SpringBootApplication tag code missing

//parameter 0: Error creating bean with name 'dataSource'
//If you don't need the datasource, simply remove it from the auto-config process:
@EnableAutoConfiguration(exclude={DataSourceAutoConfiguration.class})
Edit: If using @SpringBootApplication in your main class:
@SpringBootApplication(exclude={DataSourceAutoConfiguration.class})

Failed to introspect Class [org.springdoc.webmvc.ui.SwaggerConfig
Upgraded spring-boot-starter-parent to 3.5.0-SNAPSHOT
docker build -t spring-rest:1.0 .
// => => naming to docker.io/library/spring-rest:1.0                                                                                                                       0.0s
//=> => unpacking to docker.io/library/spring-rest:1.0

docker images (You should see the newly created image)

docker run -p 4000:8080 --name spring-rest-container spring-rest:1.0
This means, service is visible on your machine as http://localhost:4000 for others containers in the network as service1:8080.

//{} has been compiled by a more recent version of the Java Runtime (class file version 
//65.0), this version of the Java Runtime only recognizes class file versions up to 62.0
Fix line//FROM openjdk:21 ->FROM openjdk:23

https://stackoverflow.com/questions/15598210/the-import-javax-persistence-cannot-be-resolved
The javax.persistence package was moved to a newly named dependency (jakarta.persistence.

https://www.baeldung.com/spring-boot-h2-database
In the spring.datasource.url property, mem is the name of an in-memory database and testdb is the name of schema that H2
provides, by default. By default, Spring Boot configures the application to connect to the in-memory store with the 
username sa and an empty password. However, we can change those parameters by adding the following properties to the application.properties file:

By design, the in-memory database is volatile, and results in data loss after application restart.
We can change that behavior by using file-based storage. To do this we need to update the spring.datasource.url property:
spring.datasource.url=jdbc:h2:file:/data/demo

We can use basic SQL scripts to initialize the database. In order to demonstrate this using a default schema, let’s add 
a data.sql file under src/main/resources directory:
INSERT INTO countries (id, name) VALUES (1, 'USA');

Hibernate and data.sql
By default, the data.sql script executes before Hibernate initialization. As we’re recreating the schema generated by 
Hibernate each time, we need to set an additional property:
spring.jpa.defer-datasource-initialization=true
This modifies the default Spring Boot behavior and populates the data after the schema is generated by Hibernate

Then, after starting the application, we can navigate to http://localhost:8080/h2-console, which will present us with a login page.
On the login page, we’ll supply the same credentials that we used in the application.properties.
The console lists all the tables on the left side of the page and a textbox for running SQL queries:

Database "mem:testdb" not found, either pre-create it or allow remote database creation
org.springframework.boot:spring-boot-starter-jdbc'

https://medium.com/@piyumisudusinghe/spring-boot-h2-database-b5a54786ecb6
We can use two methods to create tables in the h2 database.
1. Use an Entity class: Create a new Java class called Student with Entity annotation. when we run the application, automatically create the Student table in the database. 
2. Using scripts: Create a schema.sql file under the resource folder and add the table-creating script to this file
   table creation script in schema.sql is essential if we are adding data using data.sql. 

h2 not starting + Autowiring not detected
@SpringBootApplication(exclude={DataSourceAutoConfiguration.class})
default credentials: name = "sa" password = ""

If you really want to use schema.sql you'll have to disable this feature by adding this to your application.properties:
spring.jpa.hibernate.ddl-auto=none

initial data was populated for file database but not for in-memory database?

Swagger UI library compile error
Downgrade to compatible version https://springdoc.org/faq.html#_what_is_the_compatibility_matrix_of_springdoc_openapi_with_spring_boot
Swagger UI not working for old version
/Not resolved